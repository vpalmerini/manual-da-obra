import { Router } from 'express';
import { check, validationResult } from 'express-validator';
import multer from 'multer';
import s3 from '../s3';
import { config, deleteParams } from '../services/upload.service';
import { createFile, getFile, updateFile, deleteFile } from '../services/file.service';
import { getSystem, addFile } from '../services/system.service';
import { handleError, ErrorHandler } from '../helpers/error';
import { AuthMiddleware } from '../middlewares/auth.middleware';

const router = Router();

/**
 * @swagger
 * /constructions/{id}/systems/{nickname}/files:
 *  post:
 *    security:
 *      - cookieAuth: []
 *    summary: Add new file to a system
 *    parameters:
 *      - in: path
 *        name: id
 *        schema:
 *          type: string
 *        required: true
 *        description: ID generated by MongoDB
 *      - in: path
 *        name: nickname
 *        schema:
 *          type: string
 *        required: true
 *        description: System's nickname
 *    requestBody:
 *      content:
 *        application/json:
 *          schema:
 *            $ref: '#components/schemas/File'
 *    responses:
 *      '201':
 *        description: Created
 *      '400':
 *        description: Bad Request
 *    tags:
 *      - files
 */
router.post(
  '/',
  AuthMiddleware,
  multer(config).single('file'),
  [check('name').not().isEmpty().withMessage('Name is missing')],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json(errors.array());
    }

    try {
      const { id, nickname } = req.params;
      const { contentType, location, key } = req.file;
      const { name } = req.body;
      let type;

      switch (contentType) {
        case 'application/pdf':
          type = 'project';
          break;
        case 'video/mp4':
          type = 'video';
          break;
        default:
      }

      let system = await getSystem(id, nickname);
      if (!system) {
        throw new ErrorHandler(400, 'Invalid System');
      }

      const file = await createFile({
        name,
        type,
        url: location,
        key,
        system: system._id,
      });

      system = await addFile(system._id, file._id);

      return res.status(201).json({
        status: 201,
        file,
      });
    } catch (e) {
      handleError(e, res);
    }
  }
);

/**
 * @swagger
 * /constructions/{id}/systems/{nickname}/files/{file_id}:
 *  get:
 *    security:
 *      - cookieAuth: []
 *    summary: Get the details of a system's file
 *    parameters:
 *      - in: path
 *        name: id
 *        schema:
 *          type: string
 *        required: true
 *        description: ID generated by MongoDB
 *      - in: path
 *        name: nickname
 *        schema:
 *          type: string
 *        required: true
 *        description: System's nickname
 *      - in: path
 *        name: file_id
 *        schema:
 *          type: string
 *        required: true
 *        description: File's ID
 *    responses:
 *      '200':
 *        description: OK
 *      '404':
 *        description: Not Found
 *    tags:
 *      - files
 */
router.get('/:file_id', async (req, res) => {
  try {
    const { file_id } = req.params;
    const file = await getFile(file_id);
    if (!file) throw new ErrorHandler(404, 'File not found');

    return res.status(200).json({
      status: 200,
      file,
    });
  } catch (e) {
    handleError(e, res);
  }
});

/**
 * @swagger
 * /constructions/{id}/systems/{nickname}/files/{file_id}:
 *  put:
 *    security:
 *      - cookieAuth: []
 *    summary: Edit a file
 *    parameters:
 *      - in: path
 *        name: id
 *        schema:
 *          type: string
 *        required: true
 *        description: ID generated by MongoDB
 *      - in: path
 *        name: nickname
 *        schema:
 *          type: string
 *        required: true
 *        description: System's nickname
 *      - in: path
 *        name: file_id
 *        schema:
 *          type: string
 *        required: true
 *        description: File's ID
 *    requestBody:
 *      content:
 *        application/json:
 *          schema:
 *            $ref: '#components/schemas/File'
 *    responses:
 *      '200':
 *        description: OK
 *      '400':
 *        description: Bad Request
 *      '404':
 *        description: Not Found
 *    tags:
 *      - files
 */
router.put(
  '/:file_id',
  AuthMiddleware,
  [check('type').isEmpty().withMessage('Type cannot be changed')],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json(errors.array());
    }
    try {
      const { file_id } = req.params;
      const file = await updateFile(file_id, req.body);
      if (!file) throw new ErrorHandler(404, 'File not found');

      return res.status(200).json({
        status: 200,
        file,
      });
    } catch (e) {
      handleError(e, res);
    }
  }
);

/**
 * @swagger
 * /constructions/{id}/systems/{nickname}/files/{file_id}:
 *  delete:
 *    security:
 *      - cookieAuth: []
 *    summary: Delete a file of a given construction's system
 *    parameters:
 *      - in: path
 *        name: id
 *        schema:
 *          type: string
 *        required: true
 *        description: ID generated by MongoDB
 *      - in: path
 *        name: nickname
 *        schema:
 *          type: string
 *        required: true
 *        description: System's nickname
 *      - in: path
 *        name: file_id
 *        schema:
 *          type: string
 *        required: true
 *        description: File's ID
 *    responses:
 *      '202':
 *        description: Accepted
 *      '404':
 *        description: Not Found
 *    tags:
 *      - files
 */
router.delete('/:id_file', AuthMiddleware, async (req, res) => {
  try {
    const { id_file } = req.params;
    const file = await deleteFile({ _id: id_file });
    if (!file) throw new ErrorHandler(404, 'File not found');

    const params = deleteParams(file.key);
    await s3
      .deleteObject(params)
      .promise()
      .then(() =>
        res.status(202).json({
          status: 202,
        })
      )
      .catch(() => {
        throw new ErrorHandler(500, 'Error while deleting object');
      });
  } catch (e) {
    handleError(e, res);
  }
});

export default router;
