const express = require("express");
const { check, validationResult } = require('express-validator');

const router = express.Router();
const ConstructionService = require("../services/construction.service");
const { handleError } = require("../helpers/error");
const { AuthMiddleware } = require("../middlewares/auth.middleware");

/**
 * @swagger
 * /constructions:
 *  get:
 *    security:
 *      - cookieAuth: []
 *    summary: List all constructions
 *    responses:
 *      '200':
 *        description: OK
 *    tags:
 *      - constructions
 */
router.get("/", AuthMiddleware, async (req, res) => {
  try {
    const constructions = await ConstructionService.getConstructions({});
    return res.status(200).json({
      status: 200,
      constructions,
    });
  } catch (e) {
    handleError(e, res);
  }
});

/**
 * @swagger
 * /constructions:
 *  post:
 *    security:
 *      - cookieAuth: []
 *    summary: Create a new construction
 *    requestBody:
 *      content:
 *        application/json:
 *          schema:
 *            $ref: '#components/schemas/Construction'
 *    responses:
 *      '201':
 *        description: Created
 *      '400':
 *        description: Bad Request
 *    tags:
 *      - constructions
 */
router.post("/", [
  check('name').not().isEmpty().withMessage('Name is missing'),
  check('location').not().isEmpty().withMessage('Location is missing')
], AuthMiddleware, async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json(errors.array());
  }

  try {
    const construction = await ConstructionService.createConstruction(req.body);
    return res.status(201).json({
      status: 201,
      construction,
    });
  } catch (e) {
    handleError(e, res);
  }
});

/**
 * @swagger
 * /constructions/{id}:
 *  get:
 *    security:
 *      - cookieAuth: []
 *    summary: Get a construction's details
 *    parameters:
 *      - in: path
 *        name: id
 *        schema:
 *          type: string
 *        required: true
 *        description: ID generated by MongoDB
 *    responses:
 *      '200':
 *        description: OK
 *      '404':
 *        description: Not Found
 *    tags:
 *      - constructions
 */
router.get("/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const construction = await ConstructionService.getConstruction(id);
    if (!construction) {
      return res.status(404).json({
        status: 404,
      });
    }
    return res.status(200).json({
      status: 200,
      construction,
    });
  } catch (e) {
    handleError(e, res);
  }
});

/**
 * @swagger
 * /constructions/{id}:
 *  delete:
 *    security:
 *      - cookieAuth: []
 *    summary: Delete a construction
 *    parameters:
 *      - in: path
 *        name: id
 *        schema:
 *          type: string
 *        required: true
 *        description: ID generated by MongoDB
 *    responses:
 *      '202':
 *        description: Accepted
 *      '404':
 *        description: Not Found
 *    tags:
 *      - constructions
 */
router.delete("/:id", AuthMiddleware, async (req, res) => {
  try {
    const construction = await ConstructionService.deleteConstruction(
      req.params.id
    );
    if (!construction) {
      return res.status(404).json({
        status: 404,
      });
    }
    return res.status(202).json({
      status: 202,
    });
  } catch (e) {
    handleError(e, res);
  }
});

/**
 * @swagger
 * /constructions/{id}:
 *  put:
 *    security:
 *      - cookieAuth: []
 *    summary: Edit a construction
 *    parameters:
 *      - in: path
 *        name: id
 *        schema:
 *          type: string
 *        required: true
 *        description: ID generated by MongoDB
 *    requestBody:
 *      content:
 *        application/json:
 *          schema:
 *            $ref: '#components/schemas/Construction'
 *    responses:
 *      '200':
 *        description: OK
 *      '400':
 *        description: Bad Request
 *      '404':
 *        description: Not Found
 *    tags:
 *      - constructions
 */
router.put("/:id", AuthMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    const construction = await ConstructionService.updateConstruction(
      id,
      req.body
    );
    if (!construction) {
      return res.status(404).json({
        status: 404,
      });
    }
    return res.status(200).json({
      status: 200,
    });
  } catch (e) {
    handleError(e, res);
  }
});

module.exports = router;
